Largest Time for Given Digits

Solution
Given an array of 4 digits, return the largest 24 hour time that can be made.

The smallest 24 hour time is 00:00, and the largest is 23:59.  Starting from 00:00, a time is larger if more time has elapsed since midnight.

Return the answer as a string of length 5.  If no valid time can be made, return an empty string.

 

Example 1:

Input: [1,2,3,4]
Output: "23:41"

Example 2:

Input: [5,5,5,5]
Output: ""
 

Note:

A.length == 4
0 <= A[i] <= 9

class Solution {
    public String largestTimeFromDigits(int[] A)
    {
        for (int i = 2; i >= 0; i--)
        {
            int limit = i == 2? 3 : 9;
            for (int j = limit; j >= 0; j--)
            {
                for (int k = 5; k >= 0; k--)
                {
                    for (int l = 9; l >= 0; l--)
                    {
                        int[] nums = {i, j, k, l};
                        if (timeCanBeMade(nums, A))
                        {
                            return "" + nums[0] + nums[1] + ":" + nums[2] + nums[3];
                        }
                    }
                }
            }
        }
        return "";
    }

    private boolean timeCanBeMade(int[] nums, int[] A)
    {
        List<Integer> index = new ArrayList<>();
        for (int i = 0; i < nums.length; i++)
        {
            int num = nums[i];
            boolean found = false;
            for (int j = 0; j < A.length; j++)
            {
                if (A[j] == num && !index.contains(j))
                {
                    found = true;
                    index.add(j);
                    break;
                }
            }
            if (!found)
            {
                return false;
            }
        }
        return true;
    }
}