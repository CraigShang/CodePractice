Buddy Strings

Solution
Given two strings A and B of lowercase letters, return true if you can swap two letters in A so the result is equal to B, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at A[i] and A[j]. For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

 

Example 1:

Input: A = "ab", B = "ba"
Output: true
Explanation: You can swap A[0] = 'a' and A[1] = 'b' to get "ba", which is equal to B.
Example 2:

Input: A = "ab", B = "ab"
Output: false
Explanation: The only letters you can swap are A[0] = 'a' and A[1] = 'b', which results in "ba" != B.
Example 3:

Input: A = "aa", B = "aa"
Output: true
Explanation: You can swap A[0] = 'a' and A[1] = 'a' to get "aa", which is equal to B.
Example 4:

Input: A = "aaaaaaabc", B = "aaaaaaacb"
Output: true
Example 5:

Input: A = "", B = "aa"
Output: false
 

Constraints:

0 <= A.length <= 20000
0 <= B.length <= 20000
A and B consist of lowercase letters.

class Solution {
    public boolean buddyStrings(String A, String B) {
        if(A.length() != B.length()){
            return false;
        }
        Integer indexOne = null;
        Integer indexTwo = null;
        for(int i=0; i< A.length(); i++){
            if(A.charAt(i)!=B.charAt(i)){
                if(indexOne == null){
                    indexOne = i;
                }else if(indexTwo == null){
                    indexTwo = i;
                }else{
                    return false;
                }
            }
        }
        if(indexOne != null && indexTwo != null){
            char temp = A.charAt(indexOne);
            char[] arrayFromA = A.toCharArray();
            arrayFromA[indexOne] = arrayFromA[indexTwo];
            arrayFromA[indexTwo] = temp;
            System.out.println(new String(arrayFromA));
            return B.equals(new String(arrayFromA));
        }else if(indexOne == null && indexTwo == null){
            ArrayList<Character> chars = new ArrayList<>();
            for(char each:A.toCharArray()){
                if(!chars.contains(each)){
                    chars.add(each);
                }else{
                    return true;
                }
            }
        }
        return false;
    }
}
