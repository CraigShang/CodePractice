Majority Element II

Solution
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
   Hide Hint #1  
How many majority elements could it possibly have?

class Solution {
    public List<Integer> majorityElement(int[] nums)
    {
        List<Integer> result = new ArrayList<Integer>();
        double limit = nums.length / 3;
        HashMap<Integer, Integer> numsCount = new HashMap<Integer, Integer>();
        for (int num : nums)
        {
            if (numsCount.containsKey(num))
            {
                numsCount.put(num, numsCount.get(num) + 1);
            }
            else
            {
                numsCount.put(num, 1);
            }
            if (numsCount.get(num) > limit && !result.contains(num))
            {
                result.add(num);
                if (result.size() == 2)
                {
                    return result;
                }
            }
        }
        return result;
    }
}
