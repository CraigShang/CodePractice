Insert Interval

Solution
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval)
    {
        ArrayList<Integer[]> mergedIntervals = new ArrayList<>();
        mergedIntervals.add(new Integer[] {newInterval[0], newInterval[1]});
        for (int i = 0; i < intervals.length; i++)
        {
            Integer[] last = mergedIntervals.get(mergedIntervals.size() - 1);
            Integer[] merged = mergeInterval(intervals[i], last);
            if (merged == null)
            {
                if (intervals[i][1] < last[0])
                {
                    mergedIntervals.add(mergedIntervals.size() - 1, new Integer[] {intervals[i][0],
                            intervals[i][1]});
                }
                else
                {
                    mergedIntervals.add(new Integer[] {intervals[i][0], intervals[i][1]});
                }
            }
            else
            {
                mergedIntervals.set(mergedIntervals.size() - 1, merged);
            }
        }
        int[][] result = new int[mergedIntervals.size()][2];
        for (int i = 0; i < mergedIntervals.size(); i++)
        {
            result[i][0] = mergedIntervals.get(i)[0].intValue();
            result[i][1] = mergedIntervals.get(i)[1].intValue();
        }
        return result;
    }

    private Integer[] mergeInterval(int[] interval1, Integer[] interval2)
    {
        boolean overlap = true;
        if(interval1[1] < interval2[0] || interval2[1] < interval1[0])
        {
            overlap = false;
        }
        if (overlap)
        {
            int head = interval1[0] < interval2[0] ? interval1[0] : interval2[0];
            int tail = interval1[1] > interval2[1] ? interval1[1] : interval2[1];
            return new Integer[] {head, tail};
        }
        return null;
    }
}
